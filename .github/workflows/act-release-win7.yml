# adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
# The way this works is a little weird. But basically, the create-release job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once create-release is finished. It gets
# the release upload URL by downloading the corresponding artifact (which was
# uploaded by create-release). It then builds the release executables for each
# supported platform and attaches them as release assets to the previously
# created release.
#
# The key here is that we create the release only once.

#2024-10-26 11:40
name: act-release-win7
on:
  workflow_dispatch:
#  push:
#    # Enable when testing release infrastructure on a branch.
#    # branches:
#    # - ag/release
#    tags:
#      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  # Set to force version number, e.g., when no tag exists.
  RG_VERSION: '0.0.1'
  TAG_NAME:   'v0.0.1'
# version = "0.10.6"

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: deep-soft/checkout@v4

#      - name: Get the release version from the tag
#        if: env.VERSION == ''
#        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
#
#      - name: Show the version
#        run: |
#          echo "version is: $VERSION"
#
#      - name: Check that tag version and Cargo.toml version are the same
#        shell: bash
#        run: |
#          if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
#            echo "version does not match Cargo.toml" >&2
#            exit 1
#          fi

      - name: Get version from Cargo.toml
        shell: bash
        run: |
          VERSION=v$(grep "version = " Cargo.toml | head -1 | awk '{ print $3}' | tr -d "\""  )
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub release
        #run: gh release create ${{ env.VERSION }} --draft --verify-tag --title $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
         if [ $(git tag -l "${{ env.VERSION }}") ]; then
           echo "tag exist: ${{ env.VERSION }}";
         else
           gh release create ${{ env.VERSION }} --draft --title ${{ env.VERSION }};
         fi
         upload_url=$(gh release view ${{ env.VERSION }} | grep "https:" | awk '{print $2}');
         echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV

      - name: Print version and upload_url
        shell: bash
        run: |
          echo "VERSION    = ${{ env.VERSION }}";
          echo "UPLOAD_URL = ${{ env.UPLOAD_URL }}";
    outputs:
      VERSION:    ${{ env.VERSION }}
      UPLOAD_URL: ${{ env.UPLOAD_URL }}

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux-arm, macos, win-msvc]
        include:
        #  - { build: linux      , os: ubuntu-22.04, rust: nightly           , target: x86_64-unknown-linux-musl   }
        #  - { build: linux-arm  , os: ubuntu-22.04, rust: nightly           , target: arm-unknown-linux-gnueabihf }
        #  - { build: macos      , os: macos-latest, rust: nightly           , target: x86_64-apple-darwin         }
        #  - { build: win-msvc   , os: windows-2019, rust: nightly           , target: x86_64-pc-windows-msvc      }
          - { build: win-msvc-7 , os: windows-2019, rust: nightly           , target: x86_64-win7-windows-msvc    }
        # - { build: win-gnu    , os: windows-2019, rust: nightly-x86_64-gnu, target: x86_64-pc-windows-gnu       }

    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4
        with:
          fetch-depth: 1

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          ci/ubuntu-install-packages

      - name: Install packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ci/macos-install-packages

      - name: Install Rust (others than windows7)
        if: matrix.build != 'win-msvc-7'
        uses: deep-soft/rust-toolchain-actions-rs@v4
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install Rust toolchain (windows7)
        if: matrix.build == 'win-msvc-7'
        # uses: deep-soft/rust-toolchain@master
        uses: deep-soft/rust-toolchain-actions-rs@v4
        #toolchain: "${{ contains(matrix.target, 'windows-') && '1.77.2' || 'stable' }}"
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

#      - name: Get release download URL
#        uses: actions/download-artifact@v1
#        with:
#          name: artifacts
#          path: artifacts

      - name: Set release upload URL and release version
        shell: bash
        run: |
          RELEASE_UPLOAD_URL=${{ needs.create-release.outputs.UPLOAD_URL }}
          RELEASE_VERSION=${{ needs.create-release.outputs.VERSION }}
          echo "RELEASE_UPLOAD_URL=${{ needs.create-release.outputs.UPLOAD_URL }}" >> $GITHUB_ENV
          echo "release upload url: $RELEASE_UPLOAD_URL"
          echo "RELEASE_VERSION=${{ needs.create-release.outputs.VERSION }}" >> $GITHUB_ENV
          echo "release version: $RELEASE_VERSION"

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: |
          strip "target/${{ matrix.target }}/release/rga" \
            "target/${{ matrix.target }}/release/rga-preproc" \
            "target/${{ matrix.target }}/release/rga-fzf"

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/rga \
            /target/arm-unknown-linux-gnueabihf/release/rga-preproc \
            /target/arm-unknown-linux-gnueabihf/release/rga-fzf

      - name: Build archive
        shell: bash
        run: |
          staging="ripgrep_all-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"/doc

          cp {README.md,LICENSE.md} "$staging/"
          cp CHANGELOG.md "$staging/doc/"

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/rga.exe" "$staging/"
            cp "target/${{ matrix.target }}/release/rga-preproc.exe" "$staging/"
            cp "target/${{ matrix.target }}/release/rga-fzf.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            certutil -hashfile "$staging.zip" SHA256 > "$staging.zip.sha256"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$staging.zip.sha256" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/rga" "$staging/"
            cp "target/${{ matrix.target }}/release/rga-preproc" "$staging/"
            cp "target/${{ matrix.target }}/release/rga-fzf" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            shasum -a 256 "$staging.tar.gz" > "$staging.tar.gz.sha256"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
            echo "ASSET_SUM=$staging.tar.gz.sha256" >> $GITHUB_ENV
          fi

#      - name: Upload release archive
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
#          asset_path: ${{ env.ASSET }}
#          asset_name: ${{ env.ASSET }}
#          asset_content_type: application/octet-stream

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          VERSION="${{ needs.create-release.outputs.VERSION }}"
          gh release upload $VERSION ${{ env.ASSET }} ${{ env.ASSET_SUM }} --clobber
