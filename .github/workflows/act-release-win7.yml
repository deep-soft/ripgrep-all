# adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
# The way this works is a little weird. But basically, the create-release job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once create-release is finished. It gets
# the release upload URL by downloading the corresponding artifact (which was
# uploaded by create-release). It then builds the release executables for each
# supported platform and attaches them as release assets to the previously
# created release.
#
# The key here is that we create the release only once.

#2024-10-26 11:40
name: act-release-win7
on:
  workflow_dispatch:
#  push:
#    # Enable when testing release infrastructure on a branch.
#    # branches:
#    # - ag/release
#    tags:
#      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  # Set to force version number, e.g., when no tag exists.
  RG_VERSION: '0.0.1'
  TAG_NAME:   'v0.0.1'
# version = "0.10.6"

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [win-msvc-7]
        include:
          - { build: win-msvc-7 , os: windows-2019, rust: nightly           , target: x86_64-win7-windows-msvc    }

    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4
        with:
          fetch-depth: 1

      - name: Get version from Cargo.toml
        shell: bash
        run: |
          VERSION=v$(grep "version = " Cargo.toml | head -1 | awk '{ print $3}' | tr -d "\""  )
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: GitHub release url
        #run: gh release create ${{ env.VERSION }} --draft --verify-tag --title $VERSION
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
         upload_url=$(gh release view win7 | grep "https:" | awk '{print $2}');
         echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV
         #if [ $(git tag -l "${{ env.VERSION }}") ]; then
         #  echo "tag exist: ${{ env.VERSION }}";
         #else
         #  gh release create ${{ env.VERSION }} --draft --title ${{ env.VERSION }};
         #fi
         #upload_url=$(gh release view ${{ env.VERSION }} | grep "https:" | awk '{print $2}');
         #echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV

      - name: Print version and upload_url
        shell: bash
        run: |
          echo "VERSION    = ${{ env.VERSION }}";
          echo "UPLOAD_URL = ${{ env.UPLOAD_URL }}";

      - name: Install Rust toolchain (windows7)
        if: matrix.build == 'win-msvc-7'
        # uses: deep-soft/rust-toolchain@master
        uses: deep-soft/rust-toolchain-actions-rs@v4
        # toolchain: "${{ contains(matrix.target, 'windows-') && '1.77.2' || 'stable' }}"
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Build release binary
        run: |
          ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Build archive
        shell: bash
        run: |
          staging="ripgrep_all-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          mkdir -p "$staging"/doc

          cp {README.md,LICENSE.md} "$staging/"
          cp CHANGELOG.md "$staging/doc/"

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/rga.exe" "$staging/"
            cp "target/${{ matrix.target }}/release/rga-preproc.exe" "$staging/"
            cp "target/${{ matrix.target }}/release/rga-fzf.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            certutil -hashfile "$staging.zip" SHA256 > "$staging.zip.sha256"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$staging.zip.sha256" >> $GITHUB_ENV
          fi

      - name: Publish version build - Release
        continue-on-error: false
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: false
          tag_name: win7
          # tag_name: ${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}
          files: |
            ${{ env.ASSET }}
            ${{ env.ASSET_SUM }}
