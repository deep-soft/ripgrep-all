# adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
# The way this works is a little weird. But basically, the create-release job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once create-release is finished. It gets
# the release upload URL by downloading the corresponding artifact (which was
# uploaded by create-release). It then builds the release executables for each
# supported platform and attaches them as release assets to the previously
# created release.
#
# The key here is that we create the release only once.

#2024-10-26 11:40
name: act-release-win7
on:
  workflow_dispatch:
    inputs:
      archive_ALL:
        description: Archive ALL
        type: boolean
        default: false
        required: true

#  push:
#    # Enable when testing release infrastructure on a branch.
#    # branches:
#    # - ag/release
#    tags:
#      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  TAG_NAME:                    "rg-all-win7"
  TAG_VERSION:                 "v0.0.1"
  TAG_BUILD:                   "-b"
  TAG_REF:                     "0000000"
  PROG_NAME:                   "ripgrep-all"
  PROG_VERSION:                "v0.0.1"
  VERSION:                     "0.0.1"
  WIN_VER:                     "win7"

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [win-msvc-7]
        include:
          - { build: win-msvc-7 , os: windows-2019, toolchain: 1.75           , target: x86_64-pc-windows-msvc    }

    steps:
      - name: Checkout repository
        uses: deep-soft/checkout@v4
        with:
          fetch-depth: 1

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.3
        id: read_toml_version
        with:
          file: 'Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d-%H%M)
          _date_YMD=$(date +%Y%m%d)
          _date_YYMD=$(date +%y%m%d)
          _date_y1MD=${_date_YYMD:1}
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          # echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          TAG_REF=$_ref_
          _build_=$TAG_BUILD-$_date_-$_ref_
          
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR_BASH=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV
          echo "DATE_YMD=$_date_YMD" >> $GITHUB_ENV
          echo "DATE_YYMD=$_date_YYMD" >> $GITHUB_ENV

          VERSION=$(grep -e "^version = " Cargo.toml  | awk -F '"' '{print $2}');
          ##VERSION_COMMA=$(echo $VERSION.$DATE_YYMD | tr "." ",");
          VERSION_COMMA=$(echo $VERSION.$_date_y1MD | tr "." ",");
          echo "VERSION_COMMA=$VERSION_COMMA" >> $GITHUB_ENV
          
      - name: Print env variables
        shell: bash
        run: |
          DATE_YMD=${{ env.DATE_YMD }};
          DATE_YYMD=${{ env.DATE_YYMD }};
          VERSION=${{ env.VERSION }};
          VERSION_COMMA=${{ env.VERSION_COMMA }};
          echo $DATE_YMD;
          echo $DATE_YYMD;
          echo $VERSION;
          echo $VERSION_COMMA;

      - name: set WORK_DIR_OS
        shell: cmd
        run: |
          set "WORK_DIR_OS=%CD:\=/%
          echo WORK_DIR_OS=%WORK_DIR_OS%
          echo WORK_DIR_OS=%WORK_DIR_OS%>> %GITHUB_ENV%
          echo GITHUB_WORKSPACE=%GITHUB_WORKSPACE%

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > ${{ env.WORK_DIR_BASH }}/_version_.txt
          echo "WORK_DIR_BASH=${{ env.WORK_DIR_BASH }}"
          echo "WORK_DIR_OS=${{ env.WORK_DIR_OS }}"
          echo GITHUB_WORKSPACE=$GITHUB_WORKSPACE

      - name: remove rust-toolchain.toml
        shell: bash
        run: |
          ls -la
          rm rust-toolchain.toml
          echo "after rm"
          ls -la

      - name: Get version from Cargo.toml
        shell: bash
        run: |
          VERSION=v$(grep "version = " Cargo.toml | head -1 | awk '{ print $3}' | tr -d "\""  )
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: GitHub release url
        #run: gh release create ${{ env.VERSION }} --draft --verify-tag --title $VERSION
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
         upload_url=$(gh release view win7 | grep "https:" | awk '{print $2}');
         echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV
         #if [ $(git tag -l "${{ env.VERSION }}") ]; then
         #  echo "tag exist: ${{ env.VERSION }}";
         #else
         #  gh release create ${{ env.VERSION }} --draft --title ${{ env.VERSION }};
         #fi
         #upload_url=$(gh release view ${{ env.VERSION }} | grep "https:" | awk '{print $2}');
         #echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV

      - name: Print version and upload_url
        shell: bash
        run: |
          echo "VERSION    = ${{ env.VERSION }}";
          echo "UPLOAD_URL = ${{ env.UPLOAD_URL }}";

      - uses: deep-soft/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}

      - name: Install Rust toolchain (windows7)
        if: matrix.build == 'win-msvc-7'
        # uses: deep-soft/rust-toolchain-actions-rs@v4
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          # components: "rustfmt"

      - name: Build release binary
        continue-on-error: true
        run: |
          cargo build --release

      - name: Build archive
        continue-on-error: true
        shell: bash
        run: |
          EXE_DIR="";
          if [ -f "target/${{ matrix.target }}/release/rga.exe" ]; then
            ls -la "target/${{ matrix.target }}/release/rga.exe" || true;
            EXE_DIR="target/${{ matrix.target }}/release";
          fi
          if [ -f "target/release/rga.exe" ]; then
            ls -la "target/release/rga.exe" || true;
            EXE_DIR="target/release";
          fi
          #staging="ripgrep_all-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
          staging="${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}-${{ env.WIN_VER }}"
          mkdir -p "$staging"/doc

          cp {README.md,LICENSE.md} "$staging/"
          cp CHANGELOG.md "$staging/doc/"

          if [ -f "$EXE_DIR/rga.exe" ]; then
            cp "$EXE_DIR/rga.exe" "$staging/"
          fi
          if [ -f "$EXE_DIR/rga-preproc.exe" ]; then
            cp "$EXE_DIR/rga-preproc.exe" "$staging/"
          fi
          if [ -f "$EXE_DIR/rga-fzf.exe" ]; then
            cp "$EXE_DIR/rga-fzf.exe" "$staging/"
          fi
          7z a "$staging.zip" "$staging"
          certutil -hashfile "$staging.zip" SHA256 > "$staging.zip.sha256"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
          echo "ASSET_SUM=$staging.zip.sha256" >> $GITHUB_ENV
          ls -la $staging.zip

      - name: SHA256 for Release zip
        uses: deep-soft/sha-checksums@v1
        with:
          type: 'sha256'
          filename: '${{ env.ASSET }}.sha256'
          directory: '.'
          path: '${{ env.ASSET }}'
          ignore_git: true
          # output env.SHA_SUMS

      - name: Publish version build - Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: false
          tag_name: ${{ env.TAG_NAME }}
          # tag_name: ${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}
          files: |
            ${{ env.ASSET }}
            ${{ env.ASSET_SUM }}
            ${{ env.SHA_SUMS }}

# zip release begin
      - name: Create Archive ALL
        id: zip_archive_all
        if:  ${{ inputs.archive_ALL}}
        uses: deep-soft/zip-release@v3
        with:
          type: '7z'
          filename: '${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}-${{ matrix.os }}-ALL'
          directory: '.'
          path: '.'
          exclusions: '*.git* /*node_modules/* .editorconfig'
          volume_size: '2g'
          env_variable: 'ZIP_ARCHIVE_ALL'
          # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish Archive ALL
        if:  ${{ inputs.archive_ALL}}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          #tag_name: ${{ env.TAG_VERSION }}${{ env.TAG_BUILD }}-ALL
          tag_name: ${{ env.TAG_NAME }}
          filelist: ${{ steps.zip_archive_all.outputs.volumes_list_name }}
          files: |
              ${{ env.ZIP_ARCHIVE_ALL }}
              ${{ env.WORK_DIR_OS }}/_version_.txt
# zip release end
